syntax = "proto3";

package ophion;

// import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
//import "google/protobuf/any.proto";

message Query {
  repeated Traversal query = 1;
}

message Queries {
  repeated Query queries = 1;
}

message Traversal {
  message By {
    oneof by {
      string key = 1;
      Query query = 2;
    }
  }

  message Bys {
    repeated By by = 1;
  }

  message Choose {
    Condition condition = 1;
    Query satisfied = 2;
    Query unsatisfied = 3;
  }

  message Has {
    string key = 1;
    oneof val {
      Value value = 2;
      Condition condition = 3;
      Query query = 4;
    }
  }

  message Labels {
    repeated string labels = 1;
  }

  message Where {
    oneof where {
      Query query = 1;
      Condition condition = 2;
    }
  }

  oneof statement {
    // sheer graph traversal
    Labels V = 1;
    Labels E = 2;
    Labels in = 3;
    Labels out = 4;
    Labels both = 5;
    Labels inEdge = 6;
    Labels outEdge = 7;
    bool inVertex = 8;
    bool outVertex = 9;

    // traversal manipulation
    bool identity = 20;
    Labels as = 21;
    Labels select = 22;
    By by = 23;
    bool id = 24;
    bool label = 25;
    Labels values = 26;
    Labels properties = 27;
    Labels propertyMap = 28;
    Labels dedup = 29;
    int64 limit = 30;
    Order order = 31;
    IntRange range = 32;
    bool count = 33;
    bool path = 34;
    string aggregate = 35;
    Bys group = 36;
    By groupCount = 37;

    // conditions and predicates
    Condition is = 50;
    Has has = 51;
    Labels hasLabel = 52;
    string hasNot = 53;
    Queries and = 54;
    Queries or = 55;
    Queries match = 56;
    Where where = 57;
    Choose choose = 58;
    Queries coalesce = 59;

    // math
    bool max = 70;
    bool min = 71;
    bool mean = 72;

    //Function Methods
    string import = 90;
    Function map = 91;
    Function fold = 92;

    //methods with side effects, these should be ignored for read-only graphs
    Vertex addVertex = 100;
    Edge addEdge = 101;
    string to = 102;
    string drop = 103;
    google.protobuf.Struct property = 104;
  }
}

message Vertex {
  string label = 1;
  string gid = 2;
  google.protobuf.Struct properties = 3;
}

message Edge {
  string label = 1;
  string inLabel = 2;
  string in = 3;
  string outLabel = 4;
  string out = 5;
  google.protobuf.Struct properties = 6;
}

message Function {
  repeated string args = 1;
  Traversal body = 2;
}

message Value {
  oneof value {
    string s = 1;
    int64 n = 2;
    double r = 3;
  }
}

message Values {
  repeated Value values = 1;
}

message Strings {
  repeated string ss = 1;
}

message Longs {
  repeated int64 ns = 1;
}

message Doubles {
  repeated double rs = 1;
}

message Range {
  Value lower = 1;
  Value upper = 2;
}

message IntRange {
  int64 lower = 1;
  int64 upper = 2;
}

message Order {
  string key = 1;
  bool ascending = 2;
}

message Condition {
  oneof condition {
    Value eq = 1;
    Value neq = 2;
    Value gt = 3;
    Value gte = 4;
    Value lt = 5;
    Value lte = 6;
    Range between = 7;
    Range inside = 8;
    Range outside = 9;
    Values within = 10;
    Values without = 11;
  }
}

message QueryResult {
  oneof result {
    google.protobuf.Struct struct = 1;
    Vertex vertex = 2;
    Edge edge = 3;
    int64 int_value = 4;
    double float_value = 5;
    string str_value = 6;
  }
}

message ResultRow {
  QueryResult value = 1;
  repeated QueryResult row = 2;
}

// service Ophion {
//   rpc GraphTraversal(Query) returns (stream ResultRow) {
//     option (google.api.http) = {
//       post: "/v1/query"
//       body: "*"
//     };
//   }
// }
