syntax = "proto3";

package ophion;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
//import "google/protobuf/any.proto";

message GraphQuery {
    repeated GraphStatement query = 1;
}

message GraphStatement {
    oneof statement {
        string V = 1;
	      string E = 2;
        string label = 3;
        HasStatement has = 4;
        string as = 5;
        string in = 6;
        string out = 7;
        string inEdge = 8;
        string outEdge = 9;
        string inVertex = 10;
        string outVertex = 11;
        SelectStatement select = 12;
        SelectStatement values = 13;
        int64 limit = 14;
        string count = 15;

        //Function Methods
        string import = 50;
        string map = 51;
        string fold = 52;

        //methods with side effects, these should be ignored for read-only graphs
        string addV = 100;
        google.protobuf.Struct property = 101;
        string addE = 102;
        string to = 103;
        string drop = 104;
    }
}

message HasStatement {
    string key = 1;
    repeated string within = 2;
}

message SelectStatement {
    repeated string labels = 1;
}

message Vertex {
  string gid = 1;
  string label = 2;
  //map<string, string> properties = 3;
  google.protobuf.Struct properties = 3;
}

message Edge {
  string gid = 1;
  string label = 2;
  string in = 3;
  string out = 4;
  //map<string, string> properties = 5;
  google.protobuf.Struct properties = 5;
}


message QueryResult {
    oneof result {
      google.protobuf.Struct struct = 1;
      Vertex vertex = 2;
      Edge edge = 3;
      int32 int_value = 4;
      double float_value = 5;
      string str_value = 6;
    }
}

message ResultRow {
  QueryResult value = 1;
  repeated QueryResult row = 2;
}

service Query {
  rpc Traversal(GraphQuery) returns (stream ResultRow) {
    option (google.api.http) = {
      post: "/v1/graph-query"
      body: "*"
    };
  }
}
