syntax = "proto3";

package ophion;

// import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
//import "google/protobuf/any.proto";

message Query {
  repeated Traversal query = 1;
}

message Queries {
  repeated Query queries = 1;
}

message Traversal {
  message By {
    oneof by {
      string key = 1;
      Query query = 2;
    }
  }

  message Bys {
    repeated By bys = 1;
  }

  message Choose {
    Query condition = 1;
    Query trueBranch = 2;
    Query falseBranch = 3;
  }

  message Has {
    string key = 1;
    oneof val {
      string value = 2;
      Condition condition = 3;
      Query query = 4;
    }
  }

  message Labels {
    repeated string labels = 1;
  }

  oneof statement {
    // sheer graph traversal
    string V = 1;
    string E = 2;
    string label = 3;
    repeated string in = 6;
    repeated string out = 7;
    string inEdge = 8;
    string outEdge = 9;
    string inVertex = 10;
    string outVertex = 11;

    // traversal manipulation
    Labels as = 5;
    Labels select = 12;
    By by = 20;
    Labels values = 13;
    int64 limit = 14;
    Order order = 27;
    IntRange range = 23;
    bool count = 15;
    bool dedup = 16;
    bool path = 28;
    string aggregate = 30;
    Bys group = 17;
    By groupCount = 32;

    // conditions and predicates
    Condition is = 22;
    Has has = 4;
    string hasNot = 21;
    Queries and = 16;
    Queries or = 17;
    Queries match = 18;
    Query where = 19;
    Choose choose = 29;
    Queries coalesce = 31;

    // math
    bool max = 24;
    bool min = 26;
    bool mean = 25;

    //Function Methods
    string import = 50;
    Function map = 51;
    Function fold = 52;

    //methods with side effects, these should be ignored for read-only graphs
    string addV = 100;
    string addE = 102;
    string to = 103;
    string drop = 104;
    google.protobuf.Struct property = 101;
  }
}

message Function {
  repeated string args = 1;
  Traversal body = 2;
}

message Value {
  oneof {
    string s = 1;
    int64 n = 2;
    double r = 3;
  }
}

message Values {
  repeated Value = 1;
}

message Strings {
  repeated string ss = 1;
}

message Longs {
  repeated int64 ns = 1;
}

message Doubles {
  repeated double rs = 1;
}

message Range {
  Value lower = 1;
  Value upper = 2;
}

message IntRange {
  int64 lower = 1;
  int64 upper = 2;
}

message Order {
  string key = 1;
  bool ascending = 2;
}

message Condition {
  oneof condition {
    Value eq = 1;
    Value neq = 2;
    Value gt = 3;
    Value gte = 4;
    Value lt = 5;
    Value lte = 6;
    Range between = 7;
    Range inside = 8;
    Range outside = 9;
    Values within = 10;
    Values without = 11;
  }
}

message Vertex {
  string gid = 1;
  string label = 2;
  google.protobuf.Struct properties = 3;
}

message Edge {
  string gid = 1;
  string label = 2;
  string in = 3;
  string out = 4;
  google.protobuf.Struct properties = 5;
}

message QueryResult {
  oneof result {
    google.protobuf.Struct struct = 1;
    Vertex vertex = 2;
    Edge edge = 3;
    int64 int_value = 4;
    double float_value = 5;
    string str_value = 6;
  }
}

message ResultRow {
  QueryResult value = 1;
  repeated QueryResult row = 2;
}

// service Ophion {
//   rpc GraphTraversal(Query) returns (stream ResultRow) {
//     option (google.api.http) = {
//       post: "/v1/query"
//       body: "*"
//     };
//   }
// }
